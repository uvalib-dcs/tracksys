# Awaiting fee approval has different workflow; just accept and cancel.
# Accept can only be enabled if actual fee is set and there are no units being prepared
if order.order_status == 'await_fee'
   render "await_fee_workflow", :context=>self
else

   # Only external customers require fee...
   if order.customer.external?
      div :class => 'workflow_button' do
         # Only enable send estimate when estimate is populated, fee has not been
         # sent or paid and status is not deferred/approved
         fee_disabled = order.fee.nil? || !order.date_fee_estimate_sent_to_customer.nil? ||
                        order.fee_paid? || order.order_status == 'deferred' || order.order_status == 'approved'
         button_to "Send Fee Estimate", send_fee_estimate_to_customer_admin_order_path(order.id), :disabled => fee_disabled, :method => :put
      end
   end

   div :class => 'workflow_button' do
      if order.order_status == 'deferred'
         button_to "Resume Order", defer_order_admin_order_path(order.id), :method => :put
      else
         button_to "Defer Order", defer_order_admin_order_path(order.id), :method => :put
      end
   end

   div :class => 'workflow_button' do
      approve_disabled = order.order_status == 'approved' || order.customer.external? || !order.date_order_approved.nil?
      approve_disabled = false if order.customer.external? && !order.fee.nil? && order.fee_paid? && order.order_status != 'approved'
      approve_disabled = true if order.has_approved_units == false
      button_to "Approve Order", approve_order_admin_order_path(order.id), :id=>"approve-order-btn", :disabled => approve_disabled, :method => :put
   end

   div :class => 'workflow_button' do
      # Cancel is always available
      button_to "Cancel Order", cancel_order_admin_order_path(order.id), :method => :put
   end
   div :class => 'workflow_button' do
      # complete is only available on approved orders
      button_to "Complete Order", complete_order_admin_order_path(order.id), :disabled => order.order_status != 'approved', :method => :put
   end

   # messages section
   if order.customer.external? && order.fee.nil?
      div do
         "Either enter a fee, defer or cancel this order."
      end
   elsif order.has_units_being_prepared.any?
      div do
         span do "You must approve or cancel this order's units before approving. " end
         span do order.unit_status_summary end
      end
   end
end
